/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "takeOverDisplay_menu.h"

// Global variable declarations

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
LiquidCrystalRenderer renderer(lcd, LCD_WIDTH, LCD_HEIGHT);
EthernetServer server(3333);

// Global Menu Item declarations

RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityIPAddressRtCall, ipAddressRenderFn, "IPAddress", 7, NULL)
IpAddressMenuItem menuConnectivityIPAddress(fnConnectivityIPAddressRtCall, 12, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityChangePinRtCall, textItemRenderFn, "ChangePin", -1, onChangePin)
TextMenuItem menuConnectivityChangePin(fnConnectivityChangePinRtCall, 14, 15, &menuConnectivityIPAddress);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityRtCall, backSubItemRenderFn, "Connectivity", -1, NULL)
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(fnConnectivityRtCall, &menuConnectivityChangePin);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, NULL);
const PROGMEM AnyMenuInfo minfoSettingsSaveSettings = { "Save Settings", 6, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSettingsSaveSettings(&minfoSettingsSaveSettings, NULL);
const PROGMEM AnalogMenuInfo minfoSettingsPower = { "Power", 5, 5, 250, NO_CALLBACK, 0, 10, "W" };
AnalogMenuItem menuSettingsPower(&minfoSettingsPower, 0, &menuSettingsSaveSettings);
const PROGMEM BooleanMenuInfo minfoSettingsEnabled = { "Enabled", 4, 2, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuSettingsEnabled(&minfoSettingsEnabled, false, &menuSettingsPower);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NULL)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsEnabled);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuConnectivity);
const PROGMEM AnyMenuInfo minfoQuestionDialog = { "Question Dialog", 9, 0xffff, 0, onQuestionDlg };
ActionMenuItem menuQuestionDialog(&minfoQuestionDialog, &menuSettings);
const PROGMEM AnyMenuInfo minfoInfoDialog = { "Info Dialog", 8, 0xffff, 0, onInfoDlg };
ActionMenuItem menuInfoDialog(&minfoInfoDialog, &menuQuestionDialog);
RENDERING_CALLBACK_NAME_INVOKE(fnTextRtCall, textItemRenderFn, "Text", -1, NULL)
TextMenuItem menuText(fnTextRtCall, 7, 10, &menuInfoDialog);
const char enumStrFood_0[] PROGMEM = "Pizza";
const char enumStrFood_1[] PROGMEM = "Pasta";
const char enumStrFood_2[] PROGMEM = "Salad";
const char* const enumStrFood[] PROGMEM  = { enumStrFood_0, enumStrFood_1, enumStrFood_2 };
const PROGMEM EnumMenuInfo minfoFood = { "Food", 2, 3, 2, onFoodChoice, enumStrFood };
EnumMenuItem menuFood(&minfoFood, 0, &menuText);
const PROGMEM AnyMenuInfo minfoTakeDisplay = { "Take Display", 1, 0xffff, 0, onTakeOverDisplay };
ActionMenuItem menuTakeDisplay(&minfoTakeDisplay, &menuFood);
RENDERING_CALLBACK_NAME_INVOKE(fnTimeRtCall, timeItemRenderFn, "Time", -1, NULL)
TimeFormattedMenuItem menuTime(fnTimeRtCall, 13, (MultiEditWireType)3, &menuTakeDisplay);
const PROGMEM ConnectorLocalInfo applicationInfo = { "Take Over Display", "40722ec4-e8bc-4889-b54e-d81b14cb429c" };

// Set up code

void setupMenu() {
    lcd.setIoAbstraction(io23017);
    lcd.begin(LCD_WIDTH, LCD_HEIGHT);
    switches.initialise(io23017, true);
    menuMgr.initForEncoder(&renderer, &menuTime, ENCODER_PIN_A, ENCODER_PIN_B, ENCODER_PIN_OK);
    remoteServer.begin(&server, &applicationInfo);

    // Read only and local only function calls
    menuText.setReadOnly(true);
    menuSettingsSaveSettings.setLocalOnly(true);
    menuInfoDialog.setLocalOnly(true);
    menuConnectivity.setLocalOnly(true);
    menuConnectivity.setSecured(true);
}

